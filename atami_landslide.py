# -*- coding: utf-8 -*-
"""atami_landslide.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M33BPuBllM3rqL2r03wCHNKM-XJYOTkr

# Dream Clean Stream

- This notebook is developed for Space Apps 2021 Toyohashi.  
- Sentinel-2 Ocean Debris Indexes used by [Sannigrahi+(2021 arXiv)](https://arxiv.org/abs/2106.03694).  
- Using `Google Eatrh Engine Python API` and `folium`.

## Example (Atami landslide)

### 1. Obtain and analysis images
"""

# import Earth Engine Python API and folium
import ee
import folium

# GEE authentication and initialization
ee.Authenticate()
ee.Initialize()

# set target yaear, previous year and area
start_day = "07-03"
end_day = "08-31"
tgt_year = "2021"
prev_year = "2020"
area = [139.06445,35.08165, 139.10427,35.12123]

tgt_start = tgt_year + "-" + start_day
tgt_end = tgt_year + "-" + end_day
prev_start = prev_year + "-" + start_day
prev_end = prev_year + "-" + end_day
area_geom = ee.Geometry.Rectangle(area)

# remove cloud from the image
def maskclouds(image):
    band_qa = image.select('QA60')
    cloud_mask = ee.Number(2).pow(10).int()
    cirrus_mask = ee.Number(2).pow(11).int()
    mask = band_qa.bitwiseAnd(cloud_mask).eq(0) and(
        band_qa.bitwiseAnd(cirrus_mask).eq(0))
    return image.updateMask(mask).divide(10000)

# calculate FDI (Floating Debris Index)
def calc_fdi(image):
  nir_mod = image.select("B6").add(image.select("B11").subtract(image.select("B6"))).multiply((8330-6650) / (1610-655))
  fdi = image.select("B8").subtract(nir_mod)
  return fdi.rename("FDI").copyProperties(image, ['system:time_start'])

# calculate PI (Plastic Index)
def calc_pi(image):
  pi = image.select("B8").divide(image.select("B8").add(image.select("B4")))
  return pi.rename("PI").copyProperties(image, ['system:time_start'])

# calculate NDVI (Normalized Difference Vegitation Index)
def calc_ndvi(image):
  ndvi = (image.select("B8").subtract(image.select("B4"))).divide(image.select("B8").add(image.select("B4")))
  return ndvi.rename("NDVI").copyProperties(image, ['system:time_start'])

# get target year image collection from GEE
tgt_img = (ee.ImageCollection("COPERNICUS/S2").
      filterBounds(area_geom).
      filterDate(tgt_start, tgt_end).
      filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20)).
      map(maskclouds))
tgt_img_med = tgt_img.median()

# get previous year image collection from GEE
prev_img = (ee.ImageCollection("COPERNICUS/S2").
      filterBounds(area_geom).
      filterDate(prev_start, prev_end).
      filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20)).
      map(maskclouds))
prev_img_med = prev_img.median()

# add FDI
tgt_img_med = ee.Image.cat(tgt_img_med, tgt_img.map(calc_fdi).median())
prev_img_med = ee.Image.cat(prev_img_med, prev_img.map(calc_fdi).median())

# add PI
tgt_img_med = ee.Image.cat(tgt_img_med, tgt_img.map(calc_pi).median())
prev_img_med = ee.Image.cat(prev_img_med, prev_img.map(calc_pi).median())

# add NDVI
tgt_img_med = ee.Image.cat(tgt_img_med, tgt_img.map(calc_ndvi).median())
prev_img_med = ee.Image.cat(prev_img_med, prev_img.map(calc_ndvi).median())

# difference between target year and previous year
diff = tgt_img_med.subtract(prev_img_med).divide(prev_img_med)

"""### 2. Visualize analysis result on map"""

# function of add GEE image layer for folium
def add_gee_img_layer(self, gee_img_obj, vis_params, layer_name):
  map_dict = ee.Image(gee_img_obj).getMapId(vis_params)
  folium.raster_layers.TileLayer(
      tiles=map_dict["tile_fetcher"].url_format,
      attr="Map Data @ Google Earth Engine",
      name=layer_name,
      overlay=True,
      control=True
  ).add_to(self)

folium.Map.add_gee_img_layer = add_gee_img_layer

# make map
m = folium.Map(location=[35.11,139.09], zoom_start=16)

# add GEE image
m.add_gee_img_layer(tgt_img_med, {"min": 0.0, "max": 0.15, "bands": ["B4", "B3", "B2"]}, "rgb")
m.add_gee_img_layer(diff, {"min": [-0.5, -2.0, -0.5], "max": [0.5, 2.0, 0.5], "bands": ["PI", "NDVI", "FDI"]}, "indexDiff")

# visualise map
folium.LayerControl(collapsed=True).add_to(m)
m

